//https://skalman.github.io/UglifyJS-online/
!function (t, e) { var i, o = { title: "Popup Window", modal: !0, autoOpen: !0, animationTime: 300, customClass: "", buttons: { close: !0, maximize: !0, collapse: !0, minimize: !0 }, buttonsPosition: "right", buttonsTexts: { close: "Close", maximize: "Maximize", unmaximize: "Restore", minimize: "Minimize", unminimize: "Show", collapse: "Collapse", uncollapse: "Expand" }, draggable: !0, dragOpacity: .6, resizable: !0, resizeOpacity: .6, statusBar: !0, top: "auto", left: "auto", height: 150, width: 400, maxHeight: e, maxWidth: e, minHeight: 100, minWidth: 200, collapsedWidth: e, keepInViewport: !0, mouseMoveEvents: !0 }, n = { container: { "box-sizing": "border-box", position: "fixed", top: "0", bottom: "0", right: "0", left: "0", display: "flex", "justify-content": "flex-start", "align-content": "flex-start", "pointer-events": "none" }, overlay: { "box-sizing": "border-box", position: "relative", top: "0", left: "0", width: "70%", height: "90%" }, minplaceholder: { "box-sizing": "border-box", background: "transparent", border: "none" }, popupwindow: { "box-sizing": "border-box", display: "flex", "flex-flow": "column nowrap", position: "absolute", padding: "0", "pointer-events": "auto" }, titlebar: { "box-sizing": "border-box", display: "flex", "align-items": "center" }, titlebar_text: { "box-sizing": "border-box", flex: "1 1 auto", overflow: "hidden", "text-overflow": "ellipsis", "white-space": "nowrap" }, titlebar_button: { "box-sizing": "border-box", display: "flex" }, content: { flex: "1 1 auto", overflow: "auto" }, statusbar: { "box-sizing": "border-box", display: "flex", "align-items": "flex-end" }, statusbar_content: { "box-sizing": "border-box", flex: "1 1 auto", overflow: "hidden", "text-align": "left", "text-overflow": "ellipsis", "white-space": "nowrap" }, statusbar_handle: { "box-sizing": "border-box", display: "flex", cursor: "se-resize" }, resizer_top: { position: "absolute", left: "0", right: "0", cursor: "n-resize" }, resizer_bottom: { position: "absolute", left: "0", right: "0", cursor: "s-resize" }, resizer_left: { position: "absolute", top: "0", bottom: "0", cursor: "e-resize" }, resizer_right: { position: "absolute", top: "0", bottom: "0", cursor: "w-resize" }, resizer_topleft: { position: "absolute", cursor: "nw-resize" }, resizer_topright: { position: "absolute", cursor: "ne-resize" }, resizer_bottomleft: { position: "absolute", cursor: "ne-resize" }, resizer_bottomright: { position: "absolute", cursor: "nw-resize" } }, a = { close: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 10 10" height="100%" width="100%"><g><line y2="0" x2="10" y1="10" x1="0"/><line y2="10" x2="10" y1="0" x1="0"/></g></svg>', collapse: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 10 10" height="100%" width="100%"><g fill="none"><polyline points="1,7 9,7 5,2 1,7 9,7"/></g></svg>', uncollapse: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 10 10" height="100%" width="100%"><g fill="none"><polyline points="1,3 9,3 5,8 1,3 9,3"/></g></svg>', maximize: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 10 10" height="100%" width="100%"><g fill="none"><rect x="1" y="1" height="8" width="8"/></g></svg>', unmaximize: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 10 10" height="100%" width="100%"><g fill="none"><rect x="1" y="3" height="6" width="6"/><line y1="3" x1="3" y2="1" x2="3"/><line y1="1" x1="2.5" y2="1" x2="9.5"/><line y1="1" x1="9" y2="7" x2="9"/><line y1="7" x1="9.5" y2="7" x2="7"/></g></svg>', minimize: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 10 10" height="100%" width="100%"><g><line y1="6" x1="8" y2="6" x2="2"/></g></svg>', resizeHandle: '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 10 10" height="100%" width="100%"><g><line y2="0" x2="10" y1="10" x1="0"/><line y2="2" x2="12" y1="12" x1="2"/><line y2="4" x2="14" y1="14" x1="4"/></g></svg>' }, s = { resizersWidth: 4, secondaryAnimationTimeFactor: 3 }, r = { position: "bottom left", direction: "horizontal" }; function p(r, p) { if (!r.closest(".popupwindow").length) { var l = t.extend(!0, {}, o, p); l.animationTime = parseInt(l.animationTime, 10), l.height = parseInt(l.height, 10), l.width = parseInt(l.width, 10), l.maxHeight = parseInt(l.maxHeight, 10) || 0, l.maxWidth = parseInt(l.maxWidth, 10) || 0, l.minHeight = parseInt(l.minHeight, 10) || 0, l.minWidth = parseInt(l.minWidth, 10) || 0; var h = t("<div>", { class: "popupwindow_overlay" }).css(n.overlay).appendTo(i), w = t("<div>", { class: "popupwindow_minplaceholder" }).css(n.minplaceholder).hide().appendTo(i), u = { left: "auto" == l.left ? (h.width() - l.width) / 2 : parseInt(l.left, 10), top: "auto" == l.top ? (h.height() - l.height) / 2 : parseInt(l.top, 10) }, c = t("<div>", { class: "popupwindow", css: { height: l.height, left: u.left, top: u.top, width: l.width } }).css(n.popupwindow).addClass(l.customClass).data({ originalTarget: r, originalParent: r.parent(), overlay: h, minPlaceholder: w, settings: l, opened: !1, collapsed: !1, minimized: !1, maximized: !1, currentPosition: u, currentSize: { height: l.height, width: l.width }, savedPosition: e, savedSize: e }).on("mousedown", ".popupwindow_titlebar_draggable", B).appendTo(h), m = l.buttonsPosition.toLowerCase().indexOf("l") < 0, g = t("<div>", { class: "popupwindow_titlebar" }).css(n.titlebar).appendTo(c); l.draggable && g.addClass("popupwindow_titlebar_draggable"), t("<div>", { class: "popupwindow_titlebar_text", text: l.title }).css(n.titlebar_text).css("order", m ? 1 : 5).appendTo(g), l.buttons.close && t("<div>", { class: "popupwindow_titlebar_button popupwindow_titlebar_button_close" }).css(n.titlebar_button).css("order", m ? 5 : 1).attr("title", l.buttonsTexts.close).on("click", C).append(a.close).appendTo(g), l.buttons.maximize && t("<div>", { class: "popupwindow_titlebar_button popupwindow_titlebar_button_maximize" }).css(n.titlebar_button).css("order", m ? 4 : 2).attr("title", l.buttonsTexts.maximize).on("click", S).append(a.maximize).appendTo(g), l.buttons.collapse && t("<div>", { class: "popupwindow_titlebar_button popupwindow_titlebar_button_collapse" }).css(n.titlebar_button).css("order", 3).attr("title", l.buttonsTexts.collapse).on("click", O).append(a.collapse).appendTo(g), l.buttons.minimize && t("<div>", { class: "popupwindow_titlebar_button popupwindow_titlebar_button_minimize" }).css(n.titlebar_button).css("order", m ? 2 : 4).attr("title", l.buttonsTexts.minimize).on("click", D).append(a.minimize).appendTo(g); var f = t("<div>", { class: "popupwindow_content" }).css(n.content).appendTo(c); if (r.show().appendTo(f), l.statusBar) { var b = t("<div>", { class: "popupwindow_statusbar" }).css(n.statusbar).appendTo(c); t("<div>", { class: "popupwindow_statusbar_content" }).css(n.statusbar_content).appendTo(b); var z = t("<div>", { class: "popupwindow_statusbar_handle" }).css(n.statusbar_handle).appendTo(b); l.resizable && z.append(a.resizeHandle).on("mousedown", null, { dimension: "both", directionX: "right", directionY: "bottom" }, M) } if (l.resizable) { var x = Y(c); t("<div>", { class: "popupwindow_resizer popupwindow_resizer_top", css: { top: 0 - x.top - s.resizersWidth / 2, height: x.top + s.resizersWidth } }).css(n.resizer_top).on("mousedown", null, { dimension: "height", directionY: "top" }, M).appendTo(c), t("<div>", { class: "popupwindow_resizer popupwindow_resizer_bottom", css: { bottom: 0 - x.bottom - s.resizersWidth / 2, height: x.bottom + s.resizersWidth } }).css(n.resizer_bottom).on("mousedown", null, { dimension: "height", directionY: "bottom" }, M).appendTo(c), t("<div>", { class: "popupwindow_resizer popupwindow_resizer_left", css: { left: 0 - x.left - s.resizersWidth / 2, width: x.left + s.resizersWidth } }).css(n.resizer_left).on("mousedown", null, { dimension: "width", directionX: "left" }, M).appendTo(c), t("<div>", { class: "popupwindow_resizer popupwindow_resizer_right", css: { right: 0 - x.right - s.resizersWidth / 2, width: x.right + s.resizersWidth } }).css(n.resizer_right).on("mousedown", null, { dimension: "width", directionX: "right" }, M).appendTo(c), t("<div>", { class: "popupwindow_resizer popupwindow_resizer_topleft", css: { top: 0 - x.top - s.resizersWidth / 2, left: 0 - x.left - s.resizersWidth / 2, width: x.left + s.resizersWidth, height: x.top + s.resizersWidth } }).css(n.resizer_topleft).on("mousedown", null, { dimension: "both", directionX: "left", directionY: "top" }, M).appendTo(c), t("<div>", { class: "popupwindow_resizer popupwindow_resizer_topright", css: { top: 0 - x.top - s.resizersWidth / 2, right: 0 - x.right - s.resizersWidth / 2, width: x.right + s.resizersWidth, height: x.top + s.resizersWidth } }).css(n.resizer_topright).on("mousedown", null, { dimension: "both", directionX: "right", directionY: "top" }, M).appendTo(c), t("<div>", { class: "popupwindow_resizer popupwindow_resizer_bottomleft", css: { bottom: 0 - x.bottom - s.resizersWidth / 2, left: 0 - x.left - s.resizersWidth / 2, width: x.left + s.resizersWidth, height: x.bottom + s.resizersWidth } }).css(n.resizer_bottomleft).on("mousedown", null, { dimension: "both", directionX: "left", directionY: "bottom" }, M).appendTo(c), t("<div>", { class: "popupwindow_resizer popupwindow_resizer_bottomright", css: { bottom: 0 - x.bottom - s.resizersWidth / 2, right: 0 - x.right - s.resizersWidth / 2, width: x.right + s.resizersWidth, height: x.bottom + s.resizersWidth } }).css(n.resizer_bottomright).on("mousedown", null, { dimension: "both", directionX: "right", directionY: "bottom" }, M).appendTo(c) } l.modal || h.width(0).height(0), h.hide(), l.autoOpen && d(c) } } function d(t) { t.length && !t.data("opened") && (t.data("overlay").show(), t.data("opened", !0), I(t, "open"), c(t), g(t)) } function l(t) { t.length && t.data("opened") && (t.data("minimized") && g(t), t.data("overlay").hide(), t.data("opened", !1), I(t, "close")) } function h(e) { if (e.length && e.data("opened") && !e.data("maximized") && !e.data("collapsed") && !e.data("minimized")) { var i = e.data("settings"); e.find(".popupwindow_titlebar_button_maximize").empty().append(a.unmaximize).attr("title", i.buttonsTexts.unmaximize), e.find(".popupwindow_statusbar_handle *, .popupwindow_resizer, .popupwindow_titlebar_button_collapse").hide(), i.draggable && e.find(".popupwindow_titlebar").removeClass("popupwindow_titlebar_draggable"), i.modal || e.data("overlay").css("background-color", "transparent").width("100%").height("100%"), z(e), W(e); var o = _(e, { top: 0, left: 0 }), n = X(e, { width: "100%", height: "100%" }); return t.when(o, n).then(function () { e.data("maximized", !0), I(e, "maximize") }) } } function w(e) { if (e.length && e.data("opened") && e.data("maximized")) { var i = e.data("settings"), o = x(e), n = k(e); return e.find(".popupwindow_titlebar_button_maximize").empty().append(a.maximize).attr("title", i.buttonsTexts.maximize), e.find(".popupwindow_statusbar_handle *, .popupwindow_resizer, .popupwindow_titlebar_button_collapse").show(), i.draggable && e.find(".popupwindow_titlebar").addClass("popupwindow_titlebar_draggable"), i.modal || e.data("overlay").width(0).height(0).css("background-color", ""), t.when(o, n).then(function () { e.data("maximized", !1), I(e, "unmaximize") }) } } function u(e) { if (e.length && e.data("opened") && !e.data("maximized") && !e.data("collapsed") && !e.data("minimized")) { var i = e.data("settings"); e.find(".popupwindow_titlebar_button_collapse").empty().append(a.uncollapse).attr("title", i.buttonsTexts.uncollapse), e.find(".popupwindow_content, .popupwindow_statusbar, .popupwindow_resizer, .popupwindow_titlebar_button_maximize, .popupwindow_titlebar_button_minimize").hide(), W(e); var o = X(e, { width: i.collapsedWidth, height: Y(e, "top") + Y(e, "bottom") + e.find(".popupwindow_titlebar").outerHeight() }); return t.when(o).then(function () { e.data("collapsed", !0), I(e, "collapse") }) } } function c(e) { if (e.length && e.data("opened") && e.data("collapsed")) { var i = e.data("settings"), o = k(e); return e.find(".popupwindow_titlebar_button_collapse").empty().append(a.collapse).attr("title", i.buttonsTexts.collapse), e.find(".popupwindow_content, .popupwindow_statusbar, .popupwindow_resizer, .popupwindow_titlebar_button_maximize, .popupwindow_titlebar_button_minimize").show(), t.when(o).then(function () { e.data("collapsed", !1), I(e, "uncollapse") }) } } function m(e) { if (e.length && e.data("opened") && !e.data("collapsed") && !e.data("minimized")) { var i, o = t.Deferred(), n = e.data("settings"); if (e.data("maximized")) { var a = n.animationTime; n.animationTime = n.animationTime / s.secondaryAnimationTimeFactor, i = w(e), n.animationTime = a } else z(e), W(e), i = t.Deferred().resolve(); return t.when(i).then(function () { e.addClass("popupwindow_minimized").width(""), e.find(".popupwindow_titlebar_button_minimize").attr("title", n.buttonsTexts.unminimize), e.find(".popupwindow_content, .popupwindow_statusbar, .popupwindow_resizer, .popupwindow_titlebar_button_maximize, .popupwindow_titlebar_button_collapse").hide(), n.draggable && e.find(".popupwindow_titlebar").removeClass("popupwindow_titlebar_draggable"); var i = e.data("minPlaceholder"), a = { width: e.outerWidth(), height: Y(e, "top") + Y(e, "bottom") + e.find(".popupwindow_titlebar").outerHeight() }; i.outerWidth(a.width).outerHeight(a.height).show(); var s = {}, p = i.position(); "horizontal" == r.direction ? (s.width = a.width, i.width(0)) : (s.height = a.height, i.height(0)); var d = _(e, p), l = X(e, { height: a.height }); i.animate(s, { duration: n.animationTime, queue: !1, complete: function () { t(this).hide(), e.css({ position: "relative", top: "", left: "" }).insertAfter(e.data("overlay")) } }), t.when(d, l).then(function () { e.data("minimized", !0), I(e, "minimize"), o.resolve() }) }), o.promise() } } function g(e) { if (e.length && e.data("opened") && e.data("minimized")) { var i = e.data("settings"), o = e.data("minPlaceholder"); e.removeClass("popupwindow_minimized"), e.find(".popupwindow_titlebar_button_minimize").attr("title", i.buttonsTexts.minimize), e.find(".popupwindow_content, .popupwindow_statusbar, .popupwindow_resizer, .popupwindow_titlebar_button_maximize, .popupwindow_titlebar_button_collapse").show(), i.draggable && e.find(".popupwindow_titlebar").addClass("popupwindow_titlebar_draggable"), o.show().insertAfter(e.data("overlay")); var n = { width: o.outerWidth(), height: o.outerHeight() }, a = {}, s = o.position(); "horizontal" == r.direction ? (a.width = 0, o.width(n.width)) : (a.height = 0, o.height(n.height)), e.css({ position: "absolute", top: s.top, left: s.left, width: n.width }).appendTo(e.data("overlay")); var p = x(e), d = k(e); return o.animate(a, { duration: i.animationTime, queue: !1, complete: function () { t(this).hide() } }), t.when(p, d).then(function () { e.data("minimized", !1), I(e, "unminimize") }) } } function f(i) { return i.length ? t.extend({}, i.data("currentPosition")) : e } function b(i, o) { if (!i.length) return e; t.extend(i.data("currentPosition"), o) } function z(t) { t.data("savedPosition", f(t)) } function x(t) { return _(t, t.data("savedPosition")) } function _(i, o) { if (i.length) { var n = t.Deferred(), a = i.data("settings"), s = o.animationTime !== e ? parseInt(o.animationTime) : a.animationTime, r = { top: o.top, left: o.left }; if (o.check) { if (!i.data("opened") || i.data("maximized") || i.data("minimized")) return; if (a.keepInViewport) { var p = T(i), d = t(window); r.top > d.height() - p.height && (r.top = d.height() - p.height), r.left > d.width() - p.width && (r.left = d.width() - p.width), r.top < 0 && (r.top = 0), r.left < 0 && (r.left = 0) } } var l = f(i); return l.top != r.top || l.left != r.left ? i.animate(r, { duration: s, queue: !1, complete: function () { b(i, r), o.event && I(i, "move"), n.resolve() } }) : n.resolve(), n.promise() } } function v(e) { _(e, t.extend({ animationTime: e.data("settings").animationTime / s.secondaryAnimationTimeFactor, check: !0, event: !0 }, f(e))) } function T(i) { return i.length ? t.extend({}, i.data("currentSize")) : e } function y(i, o) { if (!i.length) return e; t.extend(i.data("currentSize"), o) } function W(t) { t.data("savedSize", T(t)) } function k(e) { return X(e, t.extend({ checkPosition: !0, checkSize: !1, event: !1 }, e.data("savedSize"))) } function X(i, o) { if (i.length) { var n = t.Deferred(), a = i.data("settings"), s = o.animationTime !== e ? parseInt(o.animationTime) : a.animationTime, r = { width: o.width, height: o.height }; if (o.checkSize) { if (!i.data("opened") || i.data("maximized") || i.data("minimized")) return; a.maxWidth && r.width > a.maxWidth && (r.width = a.maxWidth), a.minWidth && r.width < a.minWidth && (r.width = a.minWidth), a.maxHeight && r.height > a.maxHeight && (r.height = a.maxHeight), a.minHeight && r.height < a.minHeight && (r.height = a.minHeight), i.data("collapsed") && (i.data("savedSize", t.extend({}, r)), delete r.height) } var p = T(i); return p.width != r.width || p.height != r.height ? i.animate(r, { duration: s, queue: !1, complete: function () { y(i, r), o.event && I(i, "resize"), o.checkPosition && v(i), n.resolve() } }) : n.resolve(), n.promise() } } function Y(t, i) { return i !== e ? parseInt(t.css("border-" + i + "-width"), 10) : { top: parseInt(t.css("border-top-width"), 10), bottom: parseInt(t.css("border-bottom-width"), 10), left: parseInt(t.css("border-left-width"), 10), right: parseInt(t.css("border-right-width"), 10) } } function H(e) { e.popupWindow.fadeTo(0, e.opacity), e.popupWindow.data("settings").mouseMoveEvents || e.popupWindow.data("tempSavedData", { position: f(e.popupWindow), size: T(e.popupWindow) }), t(document).on("mousemove", e, A).on("mouseup", e, E) } function I(t, e) { var i; "move" == e && (i = f(t)), "resize" == e && (i = T(t)), t.data("originalTarget").trigger(e + ".popupwindow", i) } function P() { var t = {}; "horizontal" == r.direction ? (t["flex-direction"] = r.position.indexOf("left") >= 0 ? "row" : "row-reverse", t["flex-wrap"] = r.position.indexOf("top") >= 0 ? "wrap" : "wrap-reverse") : (t["flex-direction"] = r.position.indexOf("top") >= 0 ? "column" : "column-reverse", t["flex-wrap"] = r.position.indexOf("left") >= 0 ? "wrap" : "wrap-reverse"), i.css(t) } function C(e) { l(t(e.currentTarget).closest(".popupwindow")) } function S(e) { var i = t(e.currentTarget).closest(".popupwindow"); i.data("maximized") ? w(i) : h(i) } function O(e) { var i = t(e.currentTarget).closest(".popupwindow"); i.data("collapsed") ? c(i) : u(i) } function D(e) { var i = t(e.currentTarget).closest(".popupwindow"); i.data("minimized") ? g(i) : m(i) } function B(e) { if (e.target !== e.currentTarget && !t(e.target).hasClass("popupwindow_titlebar_text")) return !1; var i = t(e.currentTarget).closest(".popupwindow"), o = f(i), n = i.data("settings"); n.modal || i.data("overlay").css("background-color", "transparent").width("100%").height("100%"), H({ popupWindow: i, action: "drag", opacity: n.dragOpacity, compensationX: e.pageX - o.left, compensationY: e.pageY - o.top }), e.preventDefault() } function M(e) { var i = t(e.currentTarget).closest(".popupwindow"), o = f(i), n = T(i); H({ popupWindow: i, action: "resize", dimension: e.data.dimension, directionX: e.data.directionX, directionY: e.data.directionY, opacity: i.data("settings").resizeOpacity, startX: e.pageX + ("left" == e.data.directionX ? n.width : -n.width), startY: e.pageY + ("top" == e.data.directionY ? n.height : -n.height), compensationX: e.pageX - o.left, compensationY: e.pageY - o.top }), e.preventDefault() } function A(i) { var o = i.data.popupWindow, n = o.data("settings"), a = f(o), s = T(o), r = {}, p = {}; switch (i.data.action) { case "drag": if (r.top = i.pageY - i.data.compensationY, r.left = i.pageX - i.data.compensationX, n.keepInViewport) { var d = T(o), l = t(window); r.top < 0 && (r.top = 0), r.left < 0 && (r.left = 0), r.top > l.height() - d.height && (r.top = l.height() - d.height), r.left > l.width() - d.width && (r.left = l.width() - d.width) } break; case "resize": if ("height" != i.data.dimension && i.pageX > 0) { var h = "left" == i.data.directionX ? i.data.startX - i.pageX : i.pageX - i.data.startX; h >= n.minWidth && (!n.maxWidth || h <= n.maxWidth) && (p.width = h, "left" == i.data.directionX && (r.left = i.pageX - i.data.compensationX)) } if ("width" != i.data.dimension && i.pageY > 0) { var w = "top" == i.data.directionY ? i.data.startY - i.pageY : i.pageY - i.data.startY; w >= n.minHeight && (!n.maxHeight || w <= n.maxHeight) && (p.height = w, "top" == i.data.directionY && (r.top = i.pageY - i.data.compensationY)) } }(r.top !== e && r.top != a.top || r.left !== e && r.left != a.left) && (o.css(r), b(o, r), n.mouseMoveEvents && I(o, "move")), (p.width !== e && p.width != s.width || p.height !== e && p.height != s.height) && (o.outerWidth(p.width).outerHeight(p.height), y(o, p), n.mouseMoveEvents && I(o, "resize")) } function E(e) { var i = e.data.popupWindow, o = i.data("settings"); if (i.fadeTo(0, 1), t(document).off("mousemove", A).off("mouseup", E), o.modal || i.data("overlay").width(0).height(0).css("background-color", ""), !o.mouseMoveEvents) { var n = f(i), a = T(i), s = i.data("tempSavedData"); s.position.top == n.top && s.position.left == n.left || I(i, "move"), s.size.width == a.width && s.size.height == a.height || I(i, "resize"), i.removeData("tempSavedData") } } t.PopupWindowSetup = function (e) { t.extend(!0, o, e) }, t.PopupWindowMinimizedArea = function (i) { if (i === e) return t.extend({}, r); i.position && (r.position = (i.position.toLowerCase().indexOf("b") >= 0 ? "bottom" : "top") + " " + (i.position.toLowerCase().indexOf("l") >= 0 ? "left" : "right")), i.direction && (r.direction = i.direction.toLowerCase().indexOf("h") >= 0 ? "horizontal" : "vertical"), P() }, t.fn.PopupWindow = function (i, o) { if ("string" != typeof i) return this.each(function () { p(t(this), i) }); switch (i.toLowerCase()) { case "init": return this.each(function () { p(t(this), o) }); case "open": return this.each(function () { d(t(this).closest(".popupwindow")) }); case "close": return this.each(function () { l(t(this).closest(".popupwindow")) }); case "maximize": return this.each(function () { h(t(this).closest(".popupwindow")) }); case "unmaximize": return this.each(function () { w(t(this).closest(".popupwindow")) }); case "collapse": return this.each(function () { u(t(this).closest(".popupwindow")) }); case "uncollapse": return this.each(function () { c(t(this).closest(".popupwindow")) }); case "minimize": return this.each(function () { m(t(this).closest(".popupwindow")) }); case "unminimize": return this.each(function () { g(t(this).closest(".popupwindow")) }); case "getposition": return this[0] ? f(t(this[0]).closest(".popupwindow")) : e; case "setposition": return this.each(function () { _(t(this).closest(".popupwindow"), t.extend({}, o, { check: !0, event: !0 })) }); case "getsize": return this[0] ? T(t(this[0]).closest(".popupwindow")) : e; case "setsize": return this.each(function () { X(t(this).closest(".popupwindow"), t.extend({}, o, { checkSize: !0, checkPosition: !0, event: !0 })) }); case "getstate": return this[0] ? (n = t(this[0]).closest(".popupwindow")).length ? n.data("opened") ? n.data("minimized") ? "minimized" : n.data("collapsed") ? "collapsed" : n.data("maximized") ? "maximized" : "normal" : "closed" : e : e; case "setstate": return this.each(function () { !function (t, e) { if (!t.length) return; switch (e.toLowerCase()) { case "normal": t.data("opened") || d(t), t.data("minimized") && g(t), t.data("collapsed") && c(t), t.data("maximized") && w(t); break; case "closed": l(t); break; case "maximized": h(t); break; case "unmaximized": w(t); break; case "collapsed": u(t); break; case "uncollapsed": c(t); break; case "minimized": m(t); break; case "unminimized": g(t) } }(t(this).closest(".popupwindow"), o) }); case "settitle": return this.each(function () { !function (t, e) { if (!t.length) return; t.data("settings").title = e, t.find(".popupwindow_titlebar_text").text(e) }(t(this).closest(".popupwindow"), o) }); case "statusbar": return this.each(function () { !function (t, e) { if (!t.length) return; t.find(".popupwindow_statusbar_content").html(e) }(t(this).closest(".popupwindow"), o) }); case "destroy": return this.each(function () { !function (t) { if (!t.length) return; var e = t.data("originalTarget"); e.appendTo(t.data("originalParent")), t.data("minimized") ? t.remove() : t.data("overlay").remove(); e.trigger("destroy.popupwindow") }(t(this).closest(".popupwindow")) }) }var n }, t(document).ready(function () { i = t("<div>", { class: "popupwindow_container" }).css(n.container).appendTo("body"), P(), t(window).resize(function () { t(document).find(".popupwindow").each(function () { var e = t(this); e.data("settings").keepInViewport && v(e) }) }) }) }(jQuery);